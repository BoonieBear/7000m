// DataEncode.cpp: implementation of the CDataEncode class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "ACS.h"
#include "DataEncode.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif
const BYTE chCRCHTalbe[] =                                 // CRC 高位字节值表
{
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,

0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,

0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,

0x00, 0xC1, 0x81, 0x40

};

const BYTE chCRCLTalbe[] =                                 // CRC 低位字节值表
{
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,

0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,

0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,

0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,

0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,

0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,

0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,

0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,

0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,

0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,

0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,

0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,

0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,

0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,

0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,

0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,

0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,

0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,

0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,

0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,

0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,

0x41, 0x81, 0x80, 0x40};
unsigned int CRC8_TAB[256]   =   
{     
0x00,0x07,0x0E,0x09,0x1C,0x1B,0x12,0x15,0x38,0x3F,0x36,0x31,0x24,0x23,0x2A,0x2D,   
0x70,0x77,0x7E,0x79,0x6C,0x6B,0x62,0x65,0x48,0x4F,0x46,0x41,0x54,0x53,0x5A,0x5D,   
0xE0,0xE7,0xEE,0xE9,0xFC,0xFB,0xF2,0xF5,0xD8,0xDF,0xD6,0xD1,0xC4,0xC3,0xCA,0xCD,   
0x90,0x97,0x9E,0x99,0x8C,0x8B,0x82,0x85,0xA8,0xAF,0xA6,0xA1,0xB4,0xB3,0xBA,0xBD,   
0xC7,0xC0,0xC9,0xCE,0xDB,0xDC,0xD5,0xD2,0xFF,0xF8,0xF1,0xF6,0xE3,0xE4,0xED,0xEA,   
0xB7,0xB0,0xB9,0xBE,0xAB,0xAC,0xA5,0xA2,0x8F,0x88,0x81,0x86,0x93,0x94,0x9D,0x9A,   
0x27,0x20,0x29,0x2E,0x3B,0x3C,0x35,0x32,0x1F,0x18,0x11,0x16,0x03,0x04,0x0D,0x0A,   
0x57,0x50,0x59,0x5E,0x4B,0x4C,0x45,0x42,0x6F,0x68,0x61,0x66,0x73,0x74,0x7D,0x7A,   
0x89,0x8E,0x87,0x80,0x95,0x92,0x9B,0x9C,0xB1,0xB6,0xBF,0xB8,0xAD,0xAA,0xA3,0xA4,   
0xF9,0xFE,0xF7,0xF0,0xE5,0xE2,0xEB,0xEC,0xC1,0xC6,0xCF,0xC8,0xDD,0xDA,0xD3,0xD4,   
0x69,0x6E,0x67,0x60,0x75,0x72,0x7B,0x7C,0x51,0x56,0x5F,0x58,0x4D,0x4A,0x43,0x44,   
0x19,0x1E,0x17,0x10,0x05,0x02,0x0B,0x0C,0x21,0x26,0x2F,0x28,0x3D,0x3A,0x33,0x34,   
0x4E,0x49,0x40,0x47,0x52,0x55,0x5C,0x5B,0x76,0x71,0x78,0x7F,0x6A,0x6D,0x64,0x63,   
0x3E,0x39,0x30,0x37,0x22,0x25,0x2C,0x2B,0x06,0x01,0x08,0x0F,0x1A,0x1D,0x14,0x13,   
0xAE,0xA9,0xA0,0xA7,0xB2,0xB5,0xBC,0xBB,0x96,0x91,0x98,0x9F,0x8A,0x8D,0x84,0x83,   
0xDE,0xD9,0xD0,0xD7,0xC2,0xC5,0xCC,0xCB,0xE6,0xE1,0xE8,0xEF,0xFA,0xFD,0xF4,0xF3   
};   
int s_all[64][2]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};
int o_all[64][2]={0,15,5,10,2,13,7,8,13,2,8,7,15,0,10,5,13,2,8,7,15,0,10,5,0,15,5,10,2,13,7,8,10,5,15,0,8,7,13,2,7,8,2,13,5,10,0,15,7,8,2,13,5,10,0,15,10,5,15,0,8,7,13,2,15,0,10,5,13,2,8,7,2,13,7,8,0,15,5,10,2,13,7,8,0,15,5,10,15,0,10,5,13,2,8,7,5,10,0,15,7,8,2,13,8,7,13,2,10,5,15,0,8,7,13,2,10,5,15,0,5,10,0,15,7,8,2,13};	
int InputTable[64]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CDataEncode::CDataEncode()
{
	///初始化寄存器
	r0=1;
	r1=0;
	r2=0;
	r3=0;
	r4=0;
	r5=0;
	r6=0;
	r7=0;
	r8=0;
	
	d0=d1=d2=d3=d4=d5=0;
	Z = new int[DEC_OUT_MAX_LEN];
	State_log = new int[DEC_OUT_MAX_LEN];
	memset(Z,0,DEC_OUT_MAX_LEN*sizeof(int));
	memset(State_log,0,DEC_OUT_MAX_LEN*sizeof(int));
	memset(Track_log,0,VITERBI_STATUS_NUM*TRACKLEN*sizeof(int));
	memset(Track_log_D,0,VITERBI_STATUS_NUM*TRACKLEN*sizeof(int));
	memset(ScamblingBit,0,511*sizeof(int));
	nBitLength =4320;//default

}

CDataEncode::~CDataEncode()
{
	if (InterleaveMap)
	{
		delete[] InterleaveMap;
	}
	if (Z)
	{
		delete Z;
	}
	if (State_log)
	{
		delete State_log;
	}
}

//初始化加扰数组，交织映射表
void CDataEncode::Init()
{
	InterleaveMap = new int[nBitLength];
	int temp = 0;//存储寄存器临时变量
	//初始化加扰bit数组x5+x1=x8;
	for (int i=0;i<511;i++)
	{
		ScamblingBit[i]=r0;
		temp = r8;//暂存
		r8=r5^r0;
		r0=r1;
		r1=r2;
		r2=r3;
		r3=r4;
		r4=r5;
		r5=r6;
		r6=r7;
		r7=temp;
	}

	//初始化交织数组
	int s=pow(2,ceil(log(nBitLength)/log(2)));//2^上取整{log2(n)}
	int q=s/4-1;
	InterleaveMap[0]=0;
	for (int j=1;j<nBitLength;j++)
	{
		InterleaveMap[j]=(21*InterleaveMap[j-1]+q)%s;
		while (InterleaveMap[j]>=nBitLength)
		{
			InterleaveMap[j]=(21*InterleaveMap[j]+q)%s;
		}
	}

}
//数据bit流加扰
void CDataEncode::scrambling(int SourceData[], int nlen)
{
	ASSERT(SourceData!=NULL);
	for (int i=0;i<nlen;i++)
	{
		SourceData[i] ^=ScamblingBit[i%511];
	}
}
//1to4卷积、约束长度为7，八进制生成多项式为171,133,145,133
void CDataEncode::One2FourConvolution(int SourceData[], int DestData[], int nlen)
{
	ASSERT(SourceData!=NULL);
	ASSERT(DestData!=NULL);
	for (int i=0;i<nlen;i++)
	{
		DestData[i*4]=SourceData[i]^d0^d1^d2^d5;
		DestData[i*4+1]=SourceData[i]^d1^d2^d4^d5;
		DestData[i*4+2]=SourceData[i]^d0^d3^d5;
		DestData[i*4+3]=DestData[i*4+1];
		
		d5 = d4;
		d4 = d3;
		d3 = d2;
		d2 = d1;
		d1 = d0;
		d0 = SourceData[i];

	}

}

void CDataEncode::Interleave(int SourceData[], int DestData[])
{
	ASSERT(SourceData!=NULL);
	ASSERT(DestData!=NULL);
	for (int i=0;i<nBitLength;i++)
	{
		DestData[InterleaveMap[i]] = SourceData[i];
//		DestData[i] = SourceData[i];
	}
	
}

void CDataEncode::DeInterleave(int SourceData[], int DestData[])
{
	ASSERT(SourceData!=NULL);
	ASSERT(DestData!=NULL);
	for (int i=0;i<nBitLength;i++)
	{
		DestData[i] = SourceData[InterleaveMap[i]];
//		DestData[i] = SourceData[i];
	}
}

unsigned short CDataEncode::CRC16(BYTE *pchMsg, int nDataLen)
{
	BYTE chCRCHi = 0xFF; // 高CRC字节初始化

    BYTE chCRCLo = 0xFF; // 低CRC字节初始化

    int wIndex;            // CRC循环中的索引

    while (nDataLen--)

    {
        // 计算CRC
        wIndex = chCRCLo ^ *pchMsg++ ;
        chCRCLo = chCRCHi ^ chCRCHTalbe[wIndex]; 
        chCRCHi = chCRCLTalbe[wIndex] ;
    } 
    return ((chCRCHi << 8) | chCRCLo) ;
}

void CDataEncode::BUTTERFLY(int *G_last, int O_current, int *s_all, int *o_all, int *s_last, int *G_current)
{
	int x1=0;
	int x2=0;
	int temp1=0;
	int HamTable[64]={0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6};
	x1=G_last[s_all[0]]+HamTable[O_current^o_all[0]];
	x2=G_last[s_all[1]]+HamTable[O_current^o_all[1]];
	temp1=x1<x2;
	*G_current=temp1?x1:x2;
	*s_last=temp1?s_all[0]:s_all[1];
}

int CDataEncode::min64index(int *G)
{
	int temp1,index,ii;
	temp1=G[0];index=0;

	for(ii=1;ii<64;ii++)
	{
		if(temp1>G[ii])
		{
			index=ii;
			temp1=G[ii];
		}
	}
	return index;
}

void CDataEncode::ViterbiK7(int *R, int LengthR, int *Decision)//卷积码译码
{
	int G[VITERBI_STATUS_NUM]={0};
	int S[VITERBI_STATUS_NUM]={0};
	int G_L[VITERBI_STATUS_NUM]={0};

	int ii=0;
	int jj=0;
	int kk=0;

	for (jj=0;jj<DEC_OUT_MAX_LEN;jj++)
	{
		Z[jj]=0;
		State_log[jj]=0;
	}

	for (jj=0;jj<VITERBI_STATUS_NUM*TRACKLEN;jj++)
	{
		*((int*)Track_log+jj)=0;
		*((int*)Track_log_D+jj)=0;
	}


	for (jj=0;jj<VITERBI_STATUS_NUM;jj++)
	{
		G[jj]=0;
		S[jj]=0;
	}

	for (jj=0;jj<VITERBI_STATUS_NUM;jj++)
	{
		G_L[jj]=10000;
	}
	G_L[0]=0;

	for (ii=0;ii<LengthR/4;ii++)
	{
		Z[ii]=(R[4*ii]!=0)*8
			+(R[4*ii+1]!=0)*4
			+(R[4*ii+2]!=0)*2
			+(R[4*ii+3]!=0)*1;		
	}
	for (ii=0;ii<LengthR/4;ii++)
	{
		for(jj=0;jj<VITERBI_STATUS_NUM;jj++)
		{
			BUTTERFLY(&G_L[0],Z[ii],&s_all[jj][0],&o_all[jj][0],&S[jj],&G[jj]);
		}
		for(jj=0;jj<VITERBI_STATUS_NUM*TRACKLEN;jj++)
		{
			*((int*)Track_log_D+jj)=*((int*)Track_log+jj);
		}

		for(jj=0;jj<VITERBI_STATUS_NUM;jj++)
		{
			for(kk=0;kk<TRACKLEN-1;kk++)
			{
				Track_log[jj][kk]=Track_log_D[S[jj]][kk+1];
			}
			Track_log[jj][TRACKLEN-1]=S[jj];
		}
		for(jj=0;jj<VITERBI_STATUS_NUM;jj++)
		{
			G_L[jj]=G[jj];
		}
		if(ii>TRACKLEN)
		{
			State_log[ii-TRACKLEN-1]=Track_log_D[0][0];
		}
	}

	kk=min64index(G);
	for(jj=0;jj<TRACKLEN;jj++)
	{
		State_log[jj+LengthR/4-TRACKLEN-1]=Track_log[kk][jj];
	}
	State_log[LengthR/4-1]=kk;
	for(jj=0;jj<LengthR/4;jj++)
	{
		Decision[jj]=InputTable[State_log[jj]];
	}
}

unsigned  char CDataEncode::CRC8_Tab(unsigned char *ucPtr, unsigned char ucLen)
{
	unsigned char ucIndex;                 //   CRC8校验表格索引   
	unsigned char ucCRC8 = 0;                 //   CRC8字节初始化   

	//   进行CRC8位校验   
	while   (ucLen   --)
	{   
		  ucIndex = ucCRC8^(*ucPtr++);   
		  ucCRC8 = CRC8_TAB[ucIndex];   
	}   
	//   返回CRC8校验数据   
	return (~ucCRC8);   
}
